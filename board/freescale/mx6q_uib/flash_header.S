/*
 * Copyright (C) 2012 Freescale Semiconductor, Inc.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston,
 * MA 02111-1307 USA
 */

#include <config.h>
#include <asm/arch/mx6.h>

#ifdef	CONFIG_FLASH_HEADER
#ifndef CONFIG_FLASH_HEADER_OFFSET
# error "Must define the offset of flash header"
#endif

#define CPU_2_BE_32(l) \
       ((((l) & 0x000000FF) << 24) | \
	(((l) & 0x0000FF00) << 8)  | \
	(((l) & 0x00FF0000) >> 8)  | \
	(((l) & 0xFF000000) >> 24))

#define MXC_DCD_ITEM(i, addr, val)   \
dcd_node_##i:                        \
        .word CPU_2_BE_32(addr) ;     \
        .word CPU_2_BE_32(val)  ;     \

.section ".text.flasheader", "x"
	b	_start
	.org	CONFIG_FLASH_HEADER_OFFSET

ivt_header:       .word 0x402000D1 /* Tag=0xD1, Len=0x0020, Ver=0x40 */
app_code_jump_v:  .word _start
reserv1:          .word 0x0
dcd_ptr:          .word dcd_hdr
boot_data_ptr:	  .word boot_data
self_ptr:         .word ivt_header
#ifdef CONFIG_SECURE_BOOT
app_code_csf:     .word __hab_data
#else
app_code_csf:     .word 0x0
#endif
reserv2:          .word 0x0

boot_data:        .word TEXT_BASE
#ifdef CONFIG_SECURE_BOOT
image_len:        .word __hab_data_end - TEXT_BASE + CONFIG_FLASH_HEADER_OFFSET
#else
image_len:        .word _end_of_copy  - TEXT_BASE + CONFIG_FLASH_HEADER_OFFSET
#endif
plugin:           .word 0x0

#if defined CONFIG_MX6DL_DDR3
#if defined CONFIG_MX6DL_UIB
dcd_hdr:          .word 0x40A002D2 /* Tag=0xD2, Len=83*8 + 4 + 4, Ver=0x40 */
write_dcd_cmd:    .word 0x049C02CC /* Tag=0xCC, Len=83*8 + 4, Param=0x04 */

/* EFI UIB DDR DCD header */
#define EFI_MXC_DCD_ITEM(addr, val) \
        .word CPU_2_BE_32(addr) ;     \
        .word CPU_2_BE_32(val) ;     \
/* //,============================================================================					 */
/* //init script for i.MX6DL DDR3					 */
/* //,============================================================================					 */
/* // Revision History					 */
/* // v01					 */
/* //,============================================================================					 */
					
/* //,============================================================================					 */
/* // IOMUX					 */
/* //,============================================================================					 */
/* //DDR IO TYPE:					 */
EFI_MXC_DCD_ITEM(	0x020e0774 ,	0x000C0000	/* // IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE 		 */)
EFI_MXC_DCD_ITEM(	0x020e0754 ,	0x00000000	/* // IOMUXC_SW_PAD_CTL_GRP_DDRPKE 		 */)
					
/* //CLOCK:					 */
EFI_MXC_DCD_ITEM(	0x020e04ac ,	0x00000030	/* // IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK_0		 */)
EFI_MXC_DCD_ITEM(	0x020e04b0 ,	0x00000030	/* // IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK_1		 */)
					
/* //ADDRESS:					 */
EFI_MXC_DCD_ITEM(	0x020e0464 ,	0x00000030	/* // IOMUXC_SW_PAD_CTL_PAD_DRAM_CAS		 */)
EFI_MXC_DCD_ITEM(	0x020e0490 ,	0x00000030	/* // IOMUXC_SW_PAD_CTL_PAD_DRAM_RAS		 */)
EFI_MXC_DCD_ITEM(	0x020e074c ,	0x00000030	/* // IOMUXC_SW_PAD_CTL_GRP_ADDDS 		 */)
					
/* //CONTROL:					 */
EFI_MXC_DCD_ITEM(	0x020e0494 ,	0x00000030	/* // IOMUXC_SW_PAD_CTL_PAD_DRAM_RESET		 */)
					
EFI_MXC_DCD_ITEM(	0x020e04a0 ,	0x00000000	/* // IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA2 - DSE can be configured using Group Control Register: IOMUXC_SW_PAD_CTL_GRP_CTLDS		 */)
EFI_MXC_DCD_ITEM(	0x020e04b4 ,	0x00000030	/* // IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT0		 */)
EFI_MXC_DCD_ITEM(	0x020e04b8 ,	0x00000030	/* // IOMUXC_SW_PAD_CTL_PAD_DRAM_SDODT1		 */)
EFI_MXC_DCD_ITEM(	0x020e076c ,	0x00000030	/* // IOMUXC_SW_PAD_CTL_GRP_CTLDS 		 */)
					
/* //DATA STROBE:					 */
EFI_MXC_DCD_ITEM(	0x020e0750 ,	0x00020000	/* // IOMUXC_SW_PAD_CTL_GRP_DDRMODE_CTL 		 */)
					
EFI_MXC_DCD_ITEM(	0x020e04bc ,	0x00000030	/* // IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS0 		 */)
EFI_MXC_DCD_ITEM(	0x020e04c0 ,	0x00000030	/* // IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS1 		 */)
EFI_MXC_DCD_ITEM(	0x020e04c4 ,	0x00000030	/* // IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS2 		 */)
EFI_MXC_DCD_ITEM(	0x020e04c8 ,	0x00000030	/* // IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS3 		 */)
EFI_MXC_DCD_ITEM(	0x020e04cc ,	0x00000030	/* // IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS4 		 */)
EFI_MXC_DCD_ITEM(	0x020e04d0 ,	0x00000030	/* // IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS5 		 */)
EFI_MXC_DCD_ITEM(	0x020e04d4 ,	0x00000030	/* // IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS6 		 */)
EFI_MXC_DCD_ITEM(	0x020e04d8 ,	0x00000030	/* // IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS7 		 */)
					
/* //DATA:					 */
EFI_MXC_DCD_ITEM(	0x020e0760 ,	0x00020000	/* // IOMUXC_SW_PAD_CTL_GRP_DDRMODE		 */)
					
EFI_MXC_DCD_ITEM(	0x020e0764 ,	0x00000030	/* // IOMUXC_SW_PAD_CTL_GRP_B0DS 		 */)
EFI_MXC_DCD_ITEM(	0x020e0770 ,	0x00000030	/* // IOMUXC_SW_PAD_CTL_GRP_B1DS 		 */)
EFI_MXC_DCD_ITEM(	0x020e0778 ,	0x00000030	/* // IOMUXC_SW_PAD_CTL_GRP_B2DS 		 */)
EFI_MXC_DCD_ITEM(	0x020e077c ,	0x00000030	/* // IOMUXC_SW_PAD_CTL_GRP_B3DS 		 */)
EFI_MXC_DCD_ITEM(	0x020e0780 ,	0x00000030	/* // IOMUXC_SW_PAD_CTL_GRP_B4DS 		 */)
EFI_MXC_DCD_ITEM(	0x020e0784 ,	0x00000030	/* // IOMUXC_SW_PAD_CTL_GRP_B5DS 		 */)
EFI_MXC_DCD_ITEM(	0x020e078c ,	0x00000030	/* // IOMUXC_SW_PAD_CTL_GRP_B6DS 		 */)
EFI_MXC_DCD_ITEM(	0x020e0748 ,	0x00000030	/* // IOMUXC_SW_PAD_CTL_GRP_B7DS 		 */)
					
EFI_MXC_DCD_ITEM(	0x020e0470 ,	0x00000030	/* // IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM0		 */)
EFI_MXC_DCD_ITEM(	0x020e0474 ,	0x00000030	/* // IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM1		 */)
EFI_MXC_DCD_ITEM(	0x020e0478 ,	0x00000030	/* // IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM2		 */)
EFI_MXC_DCD_ITEM(	0x020e047c ,	0x00000030	/* // IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM3		 */)
EFI_MXC_DCD_ITEM(	0x020e0480 ,	0x00000030	/* // IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM4		 */)
EFI_MXC_DCD_ITEM(	0x020e0484 ,	0x00000030	/* // IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM5		 */)
EFI_MXC_DCD_ITEM(	0x020e0488 ,	0x00000030	/* // IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM6		 */)
EFI_MXC_DCD_ITEM(	0x020e048c ,	0x00000030	/* // IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM7		 */)
					
/* //,============================================================================					 */
/* // DDR Controller Registers					 */
/* //,============================================================================					 */
/* // Manufacturer:	Micron				 */
/* // Device Part Number:	MT41J128M16HA-15E				 */
/* // Clock Freq.: 	360MHz				 */
/* // Density per CS in Gb: 	8				 */
/* // Chip Selects used:	1				 */
/* // Number of Banks:	8				 */
/* // Row address:    	14				 */
/* // Column address: 	10				 */
/* // Data bus width	64				 */
/* //,============================================================================					 */
EFI_MXC_DCD_ITEM(	0x021b0800 ,	0xa1390003 	/* // DDR_PHY_P0_MPZQHWCTRL, enable both one-time & periodic HW ZQ calibration.	0x00000002	0xa1390003  */)
					
/* // write leveling, based on Freescale board layout and T topology					 */
/* // For target board, may need to run write leveling calibration 					 */
/* // to fine tune these settings					 */
/* // If target board does not use T topology, then these registers					 */
/* // should either be cleared or write leveling calibration can be run					 */
EFI_MXC_DCD_ITEM(	0x021b080c , 	0x001F001F			)
EFI_MXC_DCD_ITEM(	0x021b0810 , 	0x001F001F			)
EFI_MXC_DCD_ITEM(	0x021b480c , 	0x001F001F			)
EFI_MXC_DCD_ITEM(	0x021b4810 , 	0x001F001F			)
					
/* //######################################################					 */
/* //calibration values based on calibration compare of 0x00ffff00:					 */
/* //Note, these calibration values are based on Freescale's board					 */
/* //May need to run calibration on target board to fine tune these 					 */
/* //######################################################					 */
					
/* //Read DQS Gating calibration					 */
EFI_MXC_DCD_ITEM(	0x021b083c ,	0x42340234	/* // MPDGCTRL0 PHY0	0x00320000	0x4220021F */)
EFI_MXC_DCD_ITEM(	0x021b0840 ,	0x02280228	/* // MPDGCTRL1 PHY0	0x00000000	0x0207017E */)
EFI_MXC_DCD_ITEM(	0x021b483c ,	0x4220022C	/* // MPDGCTRL0 PHY1	0x00000000	0x4201020C */)
EFI_MXC_DCD_ITEM(	0x021b4840 ,	0x021C021C	/* // MPDGCTRL1 PHY1	0x02000000	0x01660172 */)
					
/* //Read calibration					 */
EFI_MXC_DCD_ITEM(	0x021b0848 ,	0x42424442	/* // MPRDDLCTL PHY0	0x00000100	0x4A4D4E4D */)
EFI_MXC_DCD_ITEM(	0x021b4848 ,	0x484A4846	/* // MPRDDLCTL PHY1	0x02400040	0x4A4F5049 */)
					
/* //Write calibration					 */
EFI_MXC_DCD_ITEM(	0x021b0850 ,	0x322E2830	/* // MPWRDLCTL PHY0	0x01000000	0x3F3C3D31 */)
EFI_MXC_DCD_ITEM(	0x021b4850 ,	0x36323628	/* // MPWRDLCTL PHY1	0x0a000100	0x3238372B */)
					
/* //read data bit delay: (3 is the reccommended default value, although out of reset value is 0):					 */
EFI_MXC_DCD_ITEM(	0x021b081c ,	0x33333333	/* // DDR_PHY_P0_MPREDQBY0DL3	Original Values (Delete Later)	Difference? */)
EFI_MXC_DCD_ITEM(	0x021b0820 ,	0x33333333	/* // DDR_PHY_P0_MPREDQBY1DL3	0x00009c40	0x33333333 */)
EFI_MXC_DCD_ITEM(	0x021b0824 ,	0x33333333	/* // DDR_PHY_P0_MPREDQBY2DL3	0x00000000	0x33333333 */)
EFI_MXC_DCD_ITEM(	0x021b0828 ,	0x33333333	/* // DDR_PHY_P0_MPREDQBY3DL3	0x00000000	0x33333333 */)
EFI_MXC_DCD_ITEM(	0x021b481c ,	0x33333333	/* // DDR_PHY_P1_MPREDQBY0DL3	0x02000000	0x33333333 */)
EFI_MXC_DCD_ITEM(	0x021b4820 ,	0x33333333	/* // DDR_PHY_P1_MPREDQBY1DL3	0x01010706	0x33333333 */)
EFI_MXC_DCD_ITEM(	0x021b4824 ,	0x33333333	/* // DDR_PHY_P1_MPREDQBY2DL3	0x080b0201	0x33333333 */)
EFI_MXC_DCD_ITEM(	0x021b4828 ,	0x33333333	/* // DDR_PHY_P1_MPREDQBY3DL3	0x02000303	0x33333333 */)
					
/* //For i.mx6qd parts of versions A & B (v1.0, v1.1), uncomment the following lines. For version C (v1.2), keep commented					 */
/* //setmem /32	0x021b08c0 ,	0x24911492	// fine tune SDCLK duty cyc to low - seen to improve measured duty cycle of i.mx6		 */
/* //setmem /32	0x021b48c0 ,	0x24911492			 */
					
/* // Complete calibration by forced measurement:					 */
EFI_MXC_DCD_ITEM(	0x021b08b8 ,	0x00000800 	/* // DDR_PHY_P0_MPMUR0, frc_msr	0x02020101	0x00000800  */)
EFI_MXC_DCD_ITEM(	0x021b48b8 ,	0x00000800 	/* // DDR_PHY_P0_MPMUR0, frc_msr	0x00000000	0x00000800  */)
					
/* //MMDC init:					 */
EFI_MXC_DCD_ITEM(	0x021b0004 ,	0x0002002D	/* // MMDC0_MDPDC 	0x00000100	0x0002002D */)
EFI_MXC_DCD_ITEM(	0x021b0008 ,	0x00333030	/* // MMDC0_MDOTC	0x00050612	0x00333030 */)
EFI_MXC_DCD_ITEM(	0x021b000c ,	0x393D5102	/* // MMDC0_MDCFG0	0x06030301	0x393D5102 */)
EFI_MXC_DCD_ITEM(	0x021b0010 ,	0x922C8B63	/* // MMDC0_MDCFG1	0x00000000	0x922C8B63 */)
EFI_MXC_DCD_ITEM(	0x021b0014 ,	0x01FF00DB	/* // MMDC0_MDCFG2	0x00000a02	0x01FF00DB */)
EFI_MXC_DCD_ITEM(	0x021b0018 ,	0x00001740	/* // MMDC0_MDMISC	0x015dc002	0x00001740 */)
/* //NOTE about MDMISC RALAT:					 */
/* //MDMISC: RALAT kept to the high level of 5 to ensure stable operation at 528MHz. 					 */
/* //MDMISC: consider reducing RALAT if your 528MHz board design allow that. Lower RALAT benefits: 					 */
/* //a. better operation at low frequency					 */
/* //b. Small performence improvment					 */
					
EFI_MXC_DCD_ITEM(	0x021b001c ,	0x00008000	/* // MMDC0_MDSCR, set the Configuration request bit during MMDC set up	0x00000606	0x00008000 */)
EFI_MXC_DCD_ITEM(	0x021b002c ,	0x000026d2	/* // MMDC0_MDRWD; recommend to maintain the default values	0x00000003	0x000026d2 */)
EFI_MXC_DCD_ITEM(	0x021b0030 ,	0x003D1023	/* // MMDC0_MDOR	0x00001401	0x003D1023 */)
EFI_MXC_DCD_ITEM(	0x021b0040 ,	0x00000027	/* // CS0_END 	0x0018001b	0x00000027 */)
					
EFI_MXC_DCD_ITEM(	0x021b0000 ,	0x831A0000	/* // MMDC0_MDCTL	0x00010000	0x831A0000 */)
					
/* // Mode register writes					 */
EFI_MXC_DCD_ITEM(	0x021b001c ,	0x04008032	/* // MMDC0_MDSCR, MR2 write, CS0	0x00000000	0x04008032 */)
EFI_MXC_DCD_ITEM(	0x021b001c ,	0x00008033	/* // MMDC0_MDSCR, MR3 write, CS0	0x00000000	0x00008033 */)
EFI_MXC_DCD_ITEM(	0x021b001c ,	0x00048031	/* // MMDC0_MDSCR, MR1 write, CS0	0x00000000	0x00048031 */)
EFI_MXC_DCD_ITEM(	0x021b001c ,	0x05108030	/* // MMDC0_MDSCR, MR0 write, CS0	0x02000000	0x05108030 */)
EFI_MXC_DCD_ITEM(	0x021b001c ,	0x04008040	/* // MMDC0_MDSCR, ZQ calibration command sent to device on CS0		 */)
					
/* //setmem /32	0x021b001c ,	0x0400803A	// MMDC0_MDSCR, MR2 write, CS1	0x00000000	0x0400803A */
/* //setmem /32	0x021b001c ,	0x0000803B	// MMDC0_MDSCR, MR3 write, CS1	0x00000000	0x0000803B */
/* //setmem /32	0x021b001c ,	0x00048039	// MMDC0_MDSCR, MR1 write, CS1	0x00000000	0x00048039 */
/* //setmem /32	0x021b001c ,	0x05108038	// MMDC0_MDSCR, MR0 write, CS1	0x02000000	0x05108038 */
/* //setmem /32	0x021b001c ,	0x04008048	// MMDC0_MDSCR, ZQ calibration command sent to device on CS1		 */
					
					
EFI_MXC_DCD_ITEM(	0x021b0020 ,	0x00005800	/* // MMDC0_MDREF	0x00320000	0x00005800 */)
					
EFI_MXC_DCD_ITEM(	0x021b0818 ,	0x00011117	/* // DDR_PHY_P0_MPODTCTRL	0x00000000	0x00011117 */)
EFI_MXC_DCD_ITEM(	0x021b4818 ,	0x00011117	/* // DDR_PHY_P1_MPODTCTRL	0x00000000	0x00011117 */)
					
					
EFI_MXC_DCD_ITEM(	0x021b0004 ,	0x0002556D	/* // MMDC0_MDPDC with PWDT bits set		 */)
EFI_MXC_DCD_ITEM(	0x021b0404 , 	0x00011006	/* // MMDC0_MAPSR ADOPT power down enabled, MMDC will enter automatically to self-refresh while the number of idle cycle reached.		 */)
					
EFI_MXC_DCD_ITEM(	0x021b001c ,	0x00000000	/* // MMDC0_MDSCR, clear this register (especially the configuration bit as initialization is complete)	0x01000202	0x00000000 */)
#elif defined CONFIG_DDR_32BIT
dcd_hdr:          .word 0x40E001D2 /* Tag=0xD2, Len=59*8 + 4 + 4, Ver=0x40 */
write_dcd_cmd:    .word 0x04DC01CC /* Tag=0xCC, Len=59*8 + 4, Param=0x04 */

MXC_DCD_ITEM(1, IOMUXC_BASE_ADDR + 0x774, 0x000C0000)
MXC_DCD_ITEM(2, IOMUXC_BASE_ADDR + 0x754, 0x00000000)

MXC_DCD_ITEM(3, IOMUXC_BASE_ADDR + 0x4ac, 0x00000030)
MXC_DCD_ITEM(4, IOMUXC_BASE_ADDR + 0x4b0, 0x00000030)

MXC_DCD_ITEM(5, IOMUXC_BASE_ADDR + 0x464, 0x00000030)
MXC_DCD_ITEM(6, IOMUXC_BASE_ADDR + 0x490, 0x00000030)
MXC_DCD_ITEM(7, IOMUXC_BASE_ADDR + 0x74c, 0x00000030)

MXC_DCD_ITEM(8, IOMUXC_BASE_ADDR + 0x494, 0x00000030)

MXC_DCD_ITEM(9, IOMUXC_BASE_ADDR + 0x4a0, 0x00000000)

MXC_DCD_ITEM(10, IOMUXC_BASE_ADDR + 0x4b4, 0x00000030)
MXC_DCD_ITEM(11, IOMUXC_BASE_ADDR + 0x4b8, 0x00000030)
MXC_DCD_ITEM(12, IOMUXC_BASE_ADDR + 0x76c, 0x00000030)

MXC_DCD_ITEM(13, IOMUXC_BASE_ADDR + 0x750, 0x00020000)

MXC_DCD_ITEM(14, IOMUXC_BASE_ADDR + 0x4bc, 0x00000030)
MXC_DCD_ITEM(15, IOMUXC_BASE_ADDR + 0x4c0, 0x00000030)
MXC_DCD_ITEM(16, IOMUXC_BASE_ADDR + 0x4c4, 0x00000030)
MXC_DCD_ITEM(17, IOMUXC_BASE_ADDR + 0x4c8, 0x00000030)

MXC_DCD_ITEM(18, IOMUXC_BASE_ADDR + 0x760, 0x00020000)

MXC_DCD_ITEM(19, IOMUXC_BASE_ADDR + 0x764, 0x00000030)
MXC_DCD_ITEM(20, IOMUXC_BASE_ADDR + 0x770, 0x00000030)
MXC_DCD_ITEM(21, IOMUXC_BASE_ADDR + 0x778, 0x00000030)
MXC_DCD_ITEM(22, IOMUXC_BASE_ADDR + 0x77c, 0x00000030)

MXC_DCD_ITEM(23, IOMUXC_BASE_ADDR + 0x470, 0x00000030)
MXC_DCD_ITEM(24, IOMUXC_BASE_ADDR + 0x474, 0x00000030)
MXC_DCD_ITEM(25, IOMUXC_BASE_ADDR + 0x478, 0x00000030)
MXC_DCD_ITEM(26, IOMUXC_BASE_ADDR + 0x47c, 0x00000030)

MXC_DCD_ITEM(27, MMDC_P0_BASE_ADDR + 0x800, 0xA1390003)

MXC_DCD_ITEM(28, MMDC_P0_BASE_ADDR + 0x80c, 0x001F001F)
MXC_DCD_ITEM(29, MMDC_P0_BASE_ADDR + 0x810, 0x001F001F)

MXC_DCD_ITEM(30, MMDC_P0_BASE_ADDR + 0x83c, 0x42190219)
MXC_DCD_ITEM(31, MMDC_P0_BASE_ADDR + 0x840, 0x017B0177)
MXC_DCD_ITEM(32, MMDC_P0_BASE_ADDR + 0x848, 0x4B4D4E4D)
MXC_DCD_ITEM(33, MMDC_P0_BASE_ADDR + 0x850, 0x3F3E2D36)

MXC_DCD_ITEM(34, MMDC_P0_BASE_ADDR + 0x81c, 0x33333333)
MXC_DCD_ITEM(35, MMDC_P0_BASE_ADDR + 0x820, 0x33333333)
MXC_DCD_ITEM(36, MMDC_P0_BASE_ADDR + 0x824, 0x33333333)
MXC_DCD_ITEM(37, MMDC_P0_BASE_ADDR + 0x828, 0x33333333)

MXC_DCD_ITEM(38, MMDC_P0_BASE_ADDR + 0x8b8, 0x00000800)

MXC_DCD_ITEM(39, MMDC_P0_BASE_ADDR + 0x004, 0x0002002D)
MXC_DCD_ITEM(40, MMDC_P0_BASE_ADDR + 0x008, 0x00333030)
MXC_DCD_ITEM(41, MMDC_P0_BASE_ADDR + 0x00c, 0x3F435313)
MXC_DCD_ITEM(42, MMDC_P0_BASE_ADDR + 0x010, 0xB66E8B63)
MXC_DCD_ITEM(43, MMDC_P0_BASE_ADDR + 0x014, 0x01FF00DB)
MXC_DCD_ITEM(44, MMDC_P0_BASE_ADDR + 0x018, 0x00001740)

MXC_DCD_ITEM(45, MMDC_P0_BASE_ADDR + 0x01c, 0x00008000)
MXC_DCD_ITEM(46, MMDC_P0_BASE_ADDR + 0x02c, 0x000026d2)

MXC_DCD_ITEM(47, MMDC_P0_BASE_ADDR + 0x030, 0x00431023)
MXC_DCD_ITEM(48, MMDC_P0_BASE_ADDR + 0x040, 0x00000017)

MXC_DCD_ITEM(49, MMDC_P0_BASE_ADDR + 0x000, 0x83190000)

MXC_DCD_ITEM(50, MMDC_P0_BASE_ADDR + 0x01c, 0x04008032)
MXC_DCD_ITEM(51, MMDC_P0_BASE_ADDR + 0x01c, 0x00008033)
MXC_DCD_ITEM(52, MMDC_P0_BASE_ADDR + 0x01c, 0x00048031)
MXC_DCD_ITEM(53, MMDC_P0_BASE_ADDR + 0x01c, 0x05208030)
MXC_DCD_ITEM(54, MMDC_P0_BASE_ADDR + 0x01c, 0x04008040)

MXC_DCD_ITEM(55, MMDC_P0_BASE_ADDR + 0x020, 0x00005800)
MXC_DCD_ITEM(56, MMDC_P0_BASE_ADDR + 0x818, 0x00011117)

MXC_DCD_ITEM(57, MMDC_P0_BASE_ADDR + 0x004, 0x0002556d)
MXC_DCD_ITEM(58, MMDC_P0_BASE_ADDR + 0x404, 0x00011006)

MXC_DCD_ITEM(59, MMDC_P0_BASE_ADDR + 0x01c, 0x00000000)
#else /* i.MX6DL 64BIT-DDR */
dcd_hdr:          .word 0x40A002D2 /* Tag=0xD2, Len=83*8 + 4 + 4, Ver=0x40 */
write_dcd_cmd:    .word 0x049C02CC /* Tag=0xCC, Len=83*8 + 4, Param=0x04 */

# IOMUXC_BASE_ADDR  = 0x20e0000
# DDR IO TYPE
MXC_DCD_ITEM(1, IOMUXC_BASE_ADDR + 0x774, 0x000c0000)
MXC_DCD_ITEM(2, IOMUXC_BASE_ADDR + 0x754, 0x00000000)
# Clock
MXC_DCD_ITEM(3, IOMUXC_BASE_ADDR + 0x4ac, 0x00000030)
MXC_DCD_ITEM(4, IOMUXC_BASE_ADDR + 0x4b0, 0x00000030)
# Address
MXC_DCD_ITEM(5, IOMUXC_BASE_ADDR + 0x464, 0x00000030)
MXC_DCD_ITEM(6, IOMUXC_BASE_ADDR + 0x490, 0x00000030)
MXC_DCD_ITEM(7, IOMUXC_BASE_ADDR + 0x74c, 0x00000030)
# Control
MXC_DCD_ITEM(8, IOMUXC_BASE_ADDR + 0x494, 0x00000030)

MXC_DCD_ITEM(9, IOMUXC_BASE_ADDR + 0x4a0, 0x00000000)

MXC_DCD_ITEM(10, IOMUXC_BASE_ADDR + 0x4b4, 0x00000030)
MXC_DCD_ITEM(11, IOMUXC_BASE_ADDR + 0x4b8, 0x00000030)
MXC_DCD_ITEM(12, IOMUXC_BASE_ADDR + 0x76c, 0x00000030)
# Data Strobe
MXC_DCD_ITEM(13, IOMUXC_BASE_ADDR + 0x750, 0x00020000)

MXC_DCD_ITEM(14, IOMUXC_BASE_ADDR + 0x4bc, 0x00000030)
MXC_DCD_ITEM(15, IOMUXC_BASE_ADDR + 0x4c0, 0x00000030)
MXC_DCD_ITEM(16, IOMUXC_BASE_ADDR + 0x4c4, 0x00000030)
MXC_DCD_ITEM(17, IOMUXC_BASE_ADDR + 0x4c8, 0x00000030)
MXC_DCD_ITEM(18, IOMUXC_BASE_ADDR + 0x4cc, 0x00000030)
MXC_DCD_ITEM(19, IOMUXC_BASE_ADDR + 0x4d0, 0x00000030)
MXC_DCD_ITEM(20, IOMUXC_BASE_ADDR + 0x4d4, 0x00000030)
MXC_DCD_ITEM(21, IOMUXC_BASE_ADDR + 0x4d8, 0x00000030)

MXC_DCD_ITEM(22, IOMUXC_BASE_ADDR + 0x760, 0x00020000)

MXC_DCD_ITEM(23, IOMUXC_BASE_ADDR + 0x764, 0x00000030)
MXC_DCD_ITEM(24, IOMUXC_BASE_ADDR + 0x770, 0x00000030)
MXC_DCD_ITEM(25, IOMUXC_BASE_ADDR + 0x778, 0x00000030)
MXC_DCD_ITEM(26, IOMUXC_BASE_ADDR + 0x77c, 0x00000030)
MXC_DCD_ITEM(27, IOMUXC_BASE_ADDR + 0x780, 0x00000030)
MXC_DCD_ITEM(28, IOMUXC_BASE_ADDR + 0x784, 0x00000030)
MXC_DCD_ITEM(29, IOMUXC_BASE_ADDR + 0x78c, 0x00000030)
MXC_DCD_ITEM(30, IOMUXC_BASE_ADDR + 0x748, 0x00000030)

MXC_DCD_ITEM(31, IOMUXC_BASE_ADDR + 0x470, 0x00000030)
MXC_DCD_ITEM(32, IOMUXC_BASE_ADDR + 0x474, 0x00000030)
MXC_DCD_ITEM(33, IOMUXC_BASE_ADDR + 0x478, 0x00000030)
MXC_DCD_ITEM(34, IOMUXC_BASE_ADDR + 0x47c, 0x00000030)
MXC_DCD_ITEM(35, IOMUXC_BASE_ADDR + 0x480, 0x00000030)
MXC_DCD_ITEM(36, IOMUXC_BASE_ADDR + 0x484, 0x00000030)
MXC_DCD_ITEM(37, IOMUXC_BASE_ADDR + 0x488, 0x00000030)
MXC_DCD_ITEM(38, IOMUXC_BASE_ADDR + 0x48c, 0x00000030)

# MMDC_P0_BASE_ADDR = 0x021b0000
# MMDC_P1_BASE_ADDR = 0x021b4000
# Calibrations
# ZQ
MXC_DCD_ITEM(39, MMDC_P0_BASE_ADDR + 0x800, 0xa1390003)

# write leveling
MXC_DCD_ITEM(40, MMDC_P0_BASE_ADDR + 0x80c, 0x001F001F)
MXC_DCD_ITEM(41, MMDC_P0_BASE_ADDR + 0x810, 0x001F001F)
MXC_DCD_ITEM(42, MMDC_P1_BASE_ADDR + 0x80c, 0x001F001F)
MXC_DCD_ITEM(43, MMDC_P1_BASE_ADDR + 0x810, 0x001F001F)
# DQS gating, read delay, write delay calibration values
# based on calibration compare of 0x00ffff00
MXC_DCD_ITEM(44, MMDC_P0_BASE_ADDR + 0x83c, 0x42480248)
MXC_DCD_ITEM(45, MMDC_P0_BASE_ADDR + 0x840, 0x0211020B)
MXC_DCD_ITEM(46, MMDC_P1_BASE_ADDR + 0x83C, 0x417F0211)
MXC_DCD_ITEM(47, MMDC_P1_BASE_ADDR + 0x840, 0x015D0166)

MXC_DCD_ITEM(48, MMDC_P0_BASE_ADDR + 0x848, 0x4B4C504D)
MXC_DCD_ITEM(49, MMDC_P1_BASE_ADDR + 0x848, 0x494C4F48)

MXC_DCD_ITEM(50, MMDC_P0_BASE_ADDR + 0x850, 0x3F3F2E31)
MXC_DCD_ITEM(51, MMDC_P1_BASE_ADDR + 0x850, 0x2B35382B)

MXC_DCD_ITEM(52, MMDC_P0_BASE_ADDR + 0x81c, 0x33333333)
MXC_DCD_ITEM(53, MMDC_P0_BASE_ADDR + 0x820, 0x33333333)
MXC_DCD_ITEM(54, MMDC_P0_BASE_ADDR + 0x824, 0x33333333)
MXC_DCD_ITEM(55, MMDC_P0_BASE_ADDR + 0x828, 0x33333333)
MXC_DCD_ITEM(56, MMDC_P1_BASE_ADDR + 0x81c, 0x33333333)
MXC_DCD_ITEM(57, MMDC_P1_BASE_ADDR + 0x820, 0x33333333)
MXC_DCD_ITEM(58, MMDC_P1_BASE_ADDR + 0x824, 0x33333333)
MXC_DCD_ITEM(59, MMDC_P1_BASE_ADDR + 0x828, 0x33333333)

MXC_DCD_ITEM(60, MMDC_P0_BASE_ADDR + 0x8b8, 0x00000800)
MXC_DCD_ITEM(61, MMDC_P1_BASE_ADDR + 0x8b8, 0x00000800)
# MMDC init:
# in DDR3, 64-bit mode, only MMDC0 is initiated:
MXC_DCD_ITEM(62, MMDC_P0_BASE_ADDR + 0x004, 0x0002002D)
MXC_DCD_ITEM(63, MMDC_P0_BASE_ADDR + 0x008, 0x00333030)
MXC_DCD_ITEM(64, MMDC_P0_BASE_ADDR + 0x00c, 0x3F435313)
MXC_DCD_ITEM(65, MMDC_P0_BASE_ADDR + 0x010, 0xB66E8B63)
MXC_DCD_ITEM(66, MMDC_P0_BASE_ADDR + 0x014, 0x01FF00DB)
MXC_DCD_ITEM(67, MMDC_P0_BASE_ADDR + 0x018, 0x00081740)

MXC_DCD_ITEM(68, MMDC_P0_BASE_ADDR + 0x01c, 0x00008000)
MXC_DCD_ITEM(69, MMDC_P0_BASE_ADDR + 0x02c, 0x000026d2)
MXC_DCD_ITEM(70, MMDC_P0_BASE_ADDR + 0x030, 0x00431023)
MXC_DCD_ITEM(71, MMDC_P0_BASE_ADDR + 0x040, 0x00000027)

MXC_DCD_ITEM(72, MMDC_P0_BASE_ADDR + 0x000, 0x831A0000)

# Initialize 2GB DDR3 - Micron MT41J128M
MXC_DCD_ITEM(73, MMDC_P0_BASE_ADDR + 0x01c, 0x04008032)
MXC_DCD_ITEM(74, MMDC_P0_BASE_ADDR + 0x01c, 0x00008033)
MXC_DCD_ITEM(75, MMDC_P0_BASE_ADDR + 0x01c, 0x00048031)
MXC_DCD_ITEM(76, MMDC_P0_BASE_ADDR + 0x01c, 0x05208030)
MXC_DCD_ITEM(77, MMDC_P0_BASE_ADDR + 0x01c, 0x04008040)

MXC_DCD_ITEM(78, MMDC_P0_BASE_ADDR + 0x020, 0x00005800)

MXC_DCD_ITEM(79, MMDC_P0_BASE_ADDR + 0x818, 0x00011117)
MXC_DCD_ITEM(80, MMDC_P1_BASE_ADDR + 0x818, 0x00011117)

MXC_DCD_ITEM(81, MMDC_P0_BASE_ADDR + 0x004, 0x0002556d)
MXC_DCD_ITEM(82, MMDC_P1_BASE_ADDR + 0x404, 0x00011006)
MXC_DCD_ITEM(83, MMDC_P0_BASE_ADDR + 0x01c, 0x00000000)
#endif
#else  /* i.MX6Q */
dcd_hdr:          .word 0x40a002D2 /* Tag=0xD2, Len=83*8 + 4 + 4, Ver=0x40 */
write_dcd_cmd:    .word 0x049c02CC /* Tag=0xCC, Len=83*8 + 4, Param=0x04 */

/* DCD */


MXC_DCD_ITEM(1, IOMUXC_BASE_ADDR + 0x798, 0x000C0000)
MXC_DCD_ITEM(2, IOMUXC_BASE_ADDR + 0x758, 0x00000000)

MXC_DCD_ITEM(3, IOMUXC_BASE_ADDR + 0x588, 0x00000030)
MXC_DCD_ITEM(4, IOMUXC_BASE_ADDR + 0x594, 0x00000030)

MXC_DCD_ITEM(5, IOMUXC_BASE_ADDR + 0x56c, 0x00000030)
MXC_DCD_ITEM(6, IOMUXC_BASE_ADDR + 0x578, 0x00000030)
MXC_DCD_ITEM(7, IOMUXC_BASE_ADDR + 0x74c, 0x00000030)

MXC_DCD_ITEM(8, IOMUXC_BASE_ADDR + 0x57c, 0x00000030)

MXC_DCD_ITEM(9, IOMUXC_BASE_ADDR + 0x58c, 0x00000000)
MXC_DCD_ITEM(10, IOMUXC_BASE_ADDR + 0x59c, 0x00000030)
MXC_DCD_ITEM(11, IOMUXC_BASE_ADDR + 0x5a0, 0x00000030)
MXC_DCD_ITEM(12, IOMUXC_BASE_ADDR + 0x78c, 0x00000030)

MXC_DCD_ITEM(13, IOMUXC_BASE_ADDR + 0x750, 0x00020000)

MXC_DCD_ITEM(14, IOMUXC_BASE_ADDR + 0x5a8, 0x00000030)
MXC_DCD_ITEM(15, IOMUXC_BASE_ADDR + 0x5b0, 0x00000030)
MXC_DCD_ITEM(16, IOMUXC_BASE_ADDR + 0x524, 0x00000030)
MXC_DCD_ITEM(17, IOMUXC_BASE_ADDR + 0x51c, 0x00000030)
MXC_DCD_ITEM(18, IOMUXC_BASE_ADDR + 0x518, 0x00000030)
MXC_DCD_ITEM(19, IOMUXC_BASE_ADDR + 0x50c, 0x00000030)
MXC_DCD_ITEM(20, IOMUXC_BASE_ADDR + 0x5b8, 0x00000030)
MXC_DCD_ITEM(21, IOMUXC_BASE_ADDR + 0x5c0, 0x00000030)

MXC_DCD_ITEM(22, IOMUXC_BASE_ADDR + 0x774, 0x00020000)

MXC_DCD_ITEM(23, IOMUXC_BASE_ADDR + 0x784, 0x00000030)
MXC_DCD_ITEM(24, IOMUXC_BASE_ADDR + 0x788, 0x00000030)
MXC_DCD_ITEM(25, IOMUXC_BASE_ADDR + 0x794, 0x00000030)
MXC_DCD_ITEM(26, IOMUXC_BASE_ADDR + 0x79c, 0x00000030)
MXC_DCD_ITEM(27, IOMUXC_BASE_ADDR + 0x7a0, 0x00000030)
MXC_DCD_ITEM(28, IOMUXC_BASE_ADDR + 0x7a4, 0x00000030)
MXC_DCD_ITEM(29, IOMUXC_BASE_ADDR + 0x7a8, 0x00000030)
MXC_DCD_ITEM(30, IOMUXC_BASE_ADDR + 0x748, 0x00000030)

MXC_DCD_ITEM(31, IOMUXC_BASE_ADDR + 0x5ac, 0x00000030)
MXC_DCD_ITEM(32, IOMUXC_BASE_ADDR + 0x5b4, 0x00000030)
MXC_DCD_ITEM(33, IOMUXC_BASE_ADDR + 0x528, 0x00000030)
MXC_DCD_ITEM(34, IOMUXC_BASE_ADDR + 0x520, 0x00000030)
MXC_DCD_ITEM(35, IOMUXC_BASE_ADDR + 0x514, 0x00000030)
MXC_DCD_ITEM(36, IOMUXC_BASE_ADDR + 0x510, 0x00000030)
MXC_DCD_ITEM(37, IOMUXC_BASE_ADDR + 0x5bc, 0x00000030)
MXC_DCD_ITEM(38, IOMUXC_BASE_ADDR + 0x5c4, 0x00000030)

MXC_DCD_ITEM(39, MMDC_P0_BASE_ADDR + 0x800, 0xA1390003)

MXC_DCD_ITEM(40, MMDC_P0_BASE_ADDR + 0x80c, 0x001F001F)
MXC_DCD_ITEM(41, MMDC_P0_BASE_ADDR + 0x810, 0x001F001F)
MXC_DCD_ITEM(42, MMDC_P1_BASE_ADDR + 0x80c, 0x001F001F)
MXC_DCD_ITEM(43, MMDC_P1_BASE_ADDR + 0x810, 0x001F001F)

MXC_DCD_ITEM(44, MMDC_P0_BASE_ADDR + 0x83c, 0x4333033F)
MXC_DCD_ITEM(45, MMDC_P0_BASE_ADDR + 0x840, 0x032C031D)
MXC_DCD_ITEM(46, MMDC_P1_BASE_ADDR + 0x83c, 0x43200332)
MXC_DCD_ITEM(47, MMDC_P1_BASE_ADDR + 0x840, 0x031A026A)
MXC_DCD_ITEM(48, MMDC_P0_BASE_ADDR + 0x848, 0x4D464746)
MXC_DCD_ITEM(49, MMDC_P1_BASE_ADDR + 0x848, 0x47453F4D)
MXC_DCD_ITEM(50, MMDC_P0_BASE_ADDR + 0x850, 0x3E434440)
MXC_DCD_ITEM(51, MMDC_P1_BASE_ADDR + 0x850, 0x47384839)

MXC_DCD_ITEM(52, MMDC_P0_BASE_ADDR + 0x81c, 0x33333333)
MXC_DCD_ITEM(53, MMDC_P0_BASE_ADDR + 0x820, 0x33333333)
MXC_DCD_ITEM(54, MMDC_P0_BASE_ADDR + 0x824, 0x33333333)
MXC_DCD_ITEM(55, MMDC_P0_BASE_ADDR + 0x828, 0x33333333)
MXC_DCD_ITEM(56, MMDC_P1_BASE_ADDR + 0x81c, 0x33333333)
MXC_DCD_ITEM(57, MMDC_P1_BASE_ADDR + 0x820, 0x33333333)
MXC_DCD_ITEM(58, MMDC_P1_BASE_ADDR + 0x824, 0x33333333)
MXC_DCD_ITEM(59, MMDC_P1_BASE_ADDR + 0x828, 0x33333333)

MXC_DCD_ITEM(60, MMDC_P0_BASE_ADDR + 0x8b8, 0x00000800)
MXC_DCD_ITEM(61, MMDC_P1_BASE_ADDR + 0x8b8, 0x00000800)

MXC_DCD_ITEM(62, MMDC_P0_BASE_ADDR + 0x004, 0x00020036)
MXC_DCD_ITEM(63, MMDC_P0_BASE_ADDR + 0x008, 0x09444040)
MXC_DCD_ITEM(64, MMDC_P0_BASE_ADDR + 0x00c, 0x555A7975)
MXC_DCD_ITEM(65, MMDC_P0_BASE_ADDR + 0x010, 0xFF538F64)
MXC_DCD_ITEM(66, MMDC_P0_BASE_ADDR + 0x014, 0x01FF00DB)
MXC_DCD_ITEM(67, MMDC_P0_BASE_ADDR + 0x018, 0x00001740)

MXC_DCD_ITEM(68, MMDC_P0_BASE_ADDR + 0x01c, 0x00008000)
MXC_DCD_ITEM(69, MMDC_P0_BASE_ADDR + 0x02c, 0x000026D2)
MXC_DCD_ITEM(70, MMDC_P0_BASE_ADDR + 0x030, 0x005A1023)
MXC_DCD_ITEM(71, MMDC_P0_BASE_ADDR + 0x040, 0x00000027)

MXC_DCD_ITEM(72, MMDC_P0_BASE_ADDR + 0x000, 0x831A0000)

MXC_DCD_ITEM(73, MMDC_P0_BASE_ADDR + 0x01c, 0x04088032)
MXC_DCD_ITEM(74, MMDC_P0_BASE_ADDR + 0x01c, 0x00008033)
MXC_DCD_ITEM(75, MMDC_P0_BASE_ADDR + 0x01c, 0x00048031)
MXC_DCD_ITEM(76, MMDC_P0_BASE_ADDR + 0x01c, 0x09408030)
MXC_DCD_ITEM(77, MMDC_P0_BASE_ADDR + 0x01c, 0x04008040)

MXC_DCD_ITEM(78, MMDC_P0_BASE_ADDR + 0x020, 0x00005800)

MXC_DCD_ITEM(79, MMDC_P0_BASE_ADDR + 0x818, 0x00011117)
MXC_DCD_ITEM(80, MMDC_P1_BASE_ADDR + 0x818, 0x00011117)

MXC_DCD_ITEM(81, MMDC_P0_BASE_ADDR + 0x004, 0x00025576)
MXC_DCD_ITEM(82, MMDC_P0_BASE_ADDR + 0x404, 0x00011006)
MXC_DCD_ITEM(83, MMDC_P0_BASE_ADDR + 0x01c, 0x00000000)

#endif

#endif
